import { Loc } from "./../mlpa_engine";

import {
  PARAM_EQUILIBRIUM,
  PARAM_DETERMINATION,
  PARAM_DOG
} from "./parameters";

import {
  RANGE_PANIC,
  RANGE_TENSION,
  RANGE_STABILITY,
  RANGE_APATHY,
  RANGE_UNCERTAINTY,
  RANGE_CONFIDENCE,
  RANGE_DOG
} from "./ranges";

import {
  GRAD_PAN_APA,
  GRAD_PAN_UNC,
  GRAD_PAN_CON,
  GRAD_TEN_APA,
  GRAD_TEN_UNC,
  GRAD_TEN_CON,
  GRAD_STAB_APA,
  GRAD_STAB_UNC,
  GRAD_STAB_CON,
  GRAD_DOG
} from "./grads";

const locE = new Loc();
locE.addParams(
  locE.cParam(PARAM_DETERMINATION, 2),
  locE.cParam(PARAM_EQUILIBRIUM, 4)

  //locE.cParam(PARAM_DOG, false, true)
);

locE.addRanges(
  locE.cRange(RANGE_PANIC, 1, 5, PARAM_EQUILIBRIUM),
  locE.cRange(RANGE_TENSION, 6, 10, PARAM_EQUILIBRIUM),
  locE.cRange(RANGE_STABILITY, 11, 15, PARAM_EQUILIBRIUM),

  locE.cRange(RANGE_APATHY, 1, 5, PARAM_DETERMINATION),
  locE.cRange(RANGE_UNCERTAINTY, 6, 10, PARAM_DETERMINATION),
  locE.cRange(RANGE_CONFIDENCE, 11, 15, PARAM_DETERMINATION)

  //locE.cRange(RANGE_DOG, true, true, PARAM_DOG)
);
locE.addGrads(
  locE.cGrad(GRAD_PAN_APA, RANGE_PANIC, RANGE_APATHY),
  locE.cGrad(GRAD_PAN_UNC, RANGE_PANIC, RANGE_UNCERTAINTY),
  locE.cGrad(GRAD_PAN_CON, RANGE_PANIC, RANGE_CONFIDENCE),

  locE.cGrad(GRAD_TEN_APA, RANGE_TENSION, RANGE_APATHY),
  locE.cGrad(GRAD_TEN_UNC, RANGE_TENSION, RANGE_UNCERTAINTY),
  locE.cGrad(GRAD_TEN_CON, RANGE_TENSION, RANGE_CONFIDENCE),

  locE.cGrad(GRAD_STAB_APA, RANGE_STABILITY, RANGE_APATHY),
  locE.cGrad(GRAD_STAB_UNC, RANGE_STABILITY, RANGE_UNCERTAINTY),
  locE.cGrad(GRAD_STAB_CON, RANGE_STABILITY, RANGE_CONFIDENCE)

  // locE.cGrad(GRAD_DOG, RANGE_DOG)
);

export default locE;
