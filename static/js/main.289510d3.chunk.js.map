{"version":3,"sources":["mlpa_engine/graduation.js","mlpa_engine/parameter.js","mlpa_engine/phrase.js","mlpa_engine/range.js","mlpa_engine/stage.js","mlpa_engine/stuff.js","mlpa_engine/topic.js","mlpa_engine/change.js","mlpa_engine/loc.js","components/Game/ReplicI/ReplicI.js","components/Game/AnswerI/AnswerI.js","components/Game/UI.js","App.js","serviceWorker.js","index.js"],"names":["Graduation","name","rangesNames","this","Parameter","value","lim","Phrase","rangeName","text","id","stuff_id","Range","paramName","min","max","Stage","isStart","isBeen","topic_id","Stuff","next_stage_id","changes","isA","stage_id","Topic","graduation","isFin","Change","term","Loc","params","ranges","grads","topics","stuffs","stages","phrases","addStages","topicId","_getTopic","newStages","map","stage","_getStuffs","forEach","stuff","next_topic","concat","console","error","_getStages","filter","stageId","_getPhrases","stuffId","phrase","idState","getId","type","getStartId","startTopic","find","topic","startStage","calcStuff","s","getInterfaceStage","Interf","getCorrectPhrase","neutralPhrase","i","checkRange","interf","replic","answers","charStuff","ssign","data","key","gradName","addTopics","addStuffs","props","nextStageId","addPhrases","c","newStuffs","newPhrases","phraseId","param","range","grad","change","_getParam","newValue","_getRange","_getGrad","length","ReplicI","className","React","Component","AnswerI","answer","updateStage","onClick","UI","loc","mlpaState","currentStage","state","newStageId","setState","currentInterface","answersItems","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.289510d3.chunk.js","sourcesContent":["export default class Graduation {\n  constructor(name, rangesNames) {\n    this.name = name;\n    this.rangesNames = rangesNames;\n  }\n}\n","export default class Parameter {\n  constructor(name, value) {\n    this.name = name;\n    this.value = value;\n  }\n  lim = 10;\n}\n","export default class Phrase {\n  constructor(rangeName, text, id) {\n    this.rangeName = rangeName;\n    this.text = text;\n    this.id = id;\n  }\n  stuff_id = null\n}\n","export default class Range {\n  constructor(name, paramName, min, max) {\n    this.name = name;\n    this.paramName = paramName;\n    this.min = min;\n    this.max = max;\n  }\n}\n","export default class Stage {\n  constructor(isStart, id) {\n    this.id = id;\n    this.isStart = isStart\n  }\n  isBeen = false;\n  topic_id = null;\n}\n","export default class Stuff {\n  constructor(next_stage_id, changes = [], isA = false, id) {\n    this.next_stage_id = next_stage_id;\n    this.changes = changes;\n    this.isA = isA;\n    this.id = id;\n  }\n  stage_id = null;\n}\n","export default class Topic {\n  constructor(name, graduation, isFin, isStart,  id) {\n    this.name = name;\n    this.graduation = graduation;\n    this.isFin = isFin\n    this.isStart = isStart\n    this.id = id;\n  }\n}\n","export default class Change {\n  constructor(paramName, term) {\n    this.paramName = paramName;\n    this.term = term;\n  }\n}\n","import Parameter from \"./parameter\";\nimport Range from \"./range\";\nimport Graduation from \"./graduation\";\nimport Phrase from \"./phrase\";\nimport Stuff from \"./stuff\";\nimport Change from \"./change\";\nimport Stage from \"./stage\";\nimport Topic from \"./topic\";\n\nexport default class Loc {\n  params = [];\n  ranges = [];\n  grads = [];\n  topics = [];\n\n  stuffs = [];\n  stages = [];\n  phrases = [];\n\n  cParam(name, value) {\n    return new Parameter(name, value);\n  }\n  addParams(...params) {\n    this.params = this.params.concat(params);\n  }\n\n  cRange(name, min, max, paramName) {\n    return new Range(name, paramName, min, max);\n  }\n  addRanges(...ranges) {\n    this.ranges = this.ranges.concat(ranges);\n  }\n\n  cGrad(name, ...rangesNames) {\n    return new Graduation(name, rangesNames);\n  }\n  addGrads(...grads) {\n    this.grads = this.grads.concat(grads);\n  }\n\n  cTopic(name, gradName, isFin, isStart, ...stages) {\n    const topicId = this.getId(\"topics\");\n    this.addTopics(new Topic(name, gradName, isFin, isStart, topicId));\n    this.addStages(topicId, ...stages);\n  }\n\n  addTopics(...topics) {\n    this.topics = this.topics.concat(topics);\n  }\n\n  cStage(isStart, ...answers) {\n    const stageId = this.getId(\"stages\");\n    this.addStuffs(stageId, ...answers);\n    return new Stage(isStart, stageId);\n  }\n\n  addStages = (topicId, ...stages) => {\n    if (this._getTopic(topicId)) {\n      const newStages = stages.map(stage => {\n        const stuffs = this._getStuffs(stage.id);\n        stuffs.forEach(stuff => {\n          const { next_topic, isA } = stuff;\n          if (!next_topic && !isA) stuff.next_topic = topicId;\n        });\n        return { ...stage, topic_id: topicId };\n      });\n      this.stages = this.stages.concat(newStages);\n    } else console.error(`Topic ${topicId} not found!`);\n  };\n\n  cStuff(props, ...phrases) {\n    const { id: nextStageId, changes, isA } = props ? props : {};\n    const stuffId = this.getId(\"stuffs\");\n\n    this.addPhrases(stuffId, phrases);\n    return new Stuff(\n      nextStageId,\n      !isA ? changes.filter(c => c.term) : [],\n      isA,\n      stuffId\n    );\n  }\n\n  addStuffs(stageId, ...stuffs) {\n    const newStuffs = stuffs.map(stuff => ({ ...stuff, stage_id: stageId }));\n    this.stuffs = this.stuffs.concat(newStuffs);\n  }\n\n  addPhrases(stuffId, phrases) {\n    const newPhrases = phrases.map(phrase => ({\n      ...phrase,\n      stuff_id: stuffId\n    }));\n\n    this.phrases = this.phrases.concat(newPhrases);\n  }\n\n  cPhrase(text, rangeName) {\n    const phraseId = this.getId(\"phrases\");\n    return new Phrase(rangeName, text, phraseId);\n  }\n\n  cChange(paramName, term) {\n    return new Change(paramName, term);\n  }\n\n  _getTopic(id) {\n    return this.topics.find(topic => topic.id === id);\n  }\n  _getStages = topicId => {\n    return this.stages.filter(stage => stage.topic_id === topicId);\n  };\n\n  _getStuffs = stageId => {\n    return this.stuffs.filter(stuff => stuff.stage_id === stageId);\n  };\n\n  _getPhrases = stuffId => {\n    return this.phrases.filter(phrase => phrase.stuff_id === stuffId);\n  };\n\n  _getParam(name) {\n    return this.params.find(param => param.name === name);\n  }\n\n  _getRange(name) {\n    return this.ranges.find(range => range.name === name);\n  }\n\n  _getGrad(name) {\n    return this.grads.find(grad => grad.name === name);\n  }\n\n  _editParams(changes) {\n    changes.forEach(change => {\n      const param = this._getParam(change.paramName);\n\n      const newValue = param.value + change.term;\n      if (newValue > param.lim) {\n        param.value = param.lim;\n      } else if (newValue < 0) {\n        param.value = 0;\n      } else param.value = newValue;\n    });\n  }\n\n  checkRange(rangeName) {\n    const range = this._getRange(rangeName);\n    const param = this._getParam(range.paramName);\n    return param.value >= range.min && param.value <= range.max;\n  }\n\n  checkGrad(gradName) {\n    //ИЗМЕНИТЬ\n    const grad = this._getGrad(gradName);\n\n    for (let i = 0; i < grad.rangesNames.length; i++) {\n      const range = this._getRange(grad.rangesNames[i]);\n      if (!this.checkRange(range.value)) return false;\n    }\n    return true;\n  }\n\n  idState = {};\n  getId = type => {\n    if (!this.idState[type]) this.idState[type] = 0;\n    this.idState[type]++;\n    return this.idState[type];\n  };\n\n  getStartId = () => {\n    const startTopic = this.topics.find(topic => topic.isStart);\n    const stages = this._getStages(startTopic.id);\n    const startStage = stages.find(stage => stage.isStart);\n    return startStage ? startStage.id : null;\n  };\n\n  calcStuff = stuffId => {\n    //ДОБАВИТЬ СОБСТВЕННО РАССЧЕТ\n    const stuff = this.stuffs.find(s => s.id === stuffId);\n    return stuff.next_stage_id;\n  };\n\n  getInterfaceStage = id => {\n    //ДОБАВИТЬ ЗАВИСИМОСТЬ ОТ ДОСТУПНЫХ ТЕМ\n    const stuffs = this._getStuffs(id);\n\n    class Interf {\n      constructor(phrase, id) {\n        this.phrase = phrase;\n        this.id = id;\n      }\n    }\n\n    const getCorrectPhrase = stuff => {\n      const phrases = this._getPhrases(stuff.id);\n      const neutralPhrase = phrases.find(phrase => !phrase.rangeName);\n      for (let i in phrases) {\n        const phrase = phrases[i];\n        if (phrase.rangeName && this.checkRange(phrase.rangeName))\n          return phrase.text;\n      }\n      return neutralPhrase.text;\n    };\n\n    const interf = { replic: null, answers: [] };\n\n    const charStuff = stuffs.find(stuff => stuff.isA);\n\n    interf.replic = charStuff ? new Interf(getCorrectPhrase(charStuff)) : null;\n    interf.answers = stuffs\n      .filter(stuff => !stuff.isA)\n      .map(stuff => {\n        return new Interf(getCorrectPhrase(stuff), stuff.id);\n      });\n\n    return interf;\n  };\n\n  ssign = data => {\n    for (let key in data) {\n      this[key] = data[key];\n    }\n  };\n}\n","import React from \"react\";\nimport './style.css'\n\nexport default class ReplicI extends React.Component {\n  render() {\n    const { replic } = this.props;\n    return <div className=\"replica\">{replic.phrase}</div>;\n  }\n}\n","import React from \"react\";\nimport './style.css'\n\nexport default class AnswerI extends React.Component {\n  render() {\n    const { answer, updateStage } = this.props;\n    return (\n      <div\n          className=\"answer\"\n        onClick={() => {\n          updateStage();\n        }}\n      >\n        {answer.phrase}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Loc } from \"../../mlpa_engine\";\nimport mlpaState from \"../../mlpa_state\";\nimport ReplicI from \"./ReplicI/ReplicI\";\nimport AnswerI from \"./AnswerI/AnswerI\";\n\nexport default class UI extends React.Component {\n  constructor() {\n    super();\n    this.loc = new Loc();\n    this.loc.ssign(mlpaState);\n    const currentStage = this.loc.getStartId();\n    this.state = {\n      currentStage\n    };\n  }\n\n  updateStage(stuffId) {\n    const newStageId = this.loc.calcStuff(stuffId);\n    this.setState({ currentStage: newStageId });\n  }\n\n  render() {\n    const { currentStage } = this.state;\n    const currentInterface = this.loc.getInterfaceStage(currentStage);\n\n    const { answers, replic } = currentInterface;\n    const answersItems = answers.map(answer => {\n      return (\n        <AnswerI\n          key={answer.id}\n          answer={answer}\n          updateStage={() => {\n            this.updateStage(answer.id);\n          }}\n        />\n      );\n    });\n\n    return (\n      <div>\n        <ReplicI replic={replic} />\n        {answersItems}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport UI from \"./components/Game/UI\";\n\n\nfunction App() {\n  return (\n    <div>\n      <UI />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}